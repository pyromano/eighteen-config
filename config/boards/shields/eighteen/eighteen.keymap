/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"

/* Settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L 0 1 2 6 7 8 9       // left hand
#define KEYS_R 3 4 5 10 11 12 13   // right hand
#define THUMBS 14 15 16 17         // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Homerow layers */
#define MAKE_HRL(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <220>; \
        quick-tap-ms = <250>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRL(hll, &mo, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRL(hlr, &mo, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* custom behaviors */

// tap: sticky shift | double tap: capsword
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)
// CMD+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <0 15>;
)

 
/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define BT 6
#define FUN 7
#define AL2U 8

/ { 
    combos {
      compatible = "zmk,combos";
      combo_sys {
          timeout-ms = <30>;
          key-positions = <3 4 5>;
          bindings = <&to SYS>;
      };
      combo_caps {
          timeout-ms = <30>;
          key-positions = <10 11 12>;
          bindings = <&caps_word>;
      };
      combo_num {
          timeout-ms = <30>;
          key-positions = <0 1 2>;
          bindings = <&to NUM>;
      };
      combo_bt  {
          timeout-ms = <10>;
          key-positions = <7 9>;
          bindings = <&to BT>;
          layers = <SM1>;
      };
      combo_fun  {
          timeout-ms = <10>;
          key-positions = <10 12>;
          bindings = <&to FUN>;
          layers = <AL1>;
      };
      bksp {
        timeout-ms = <50>;
        key-positions = <4 5>;
        bindings = <&kp BKSP>;
        layers = <AL1 AL2 AL2U>;
      };
      ret {
        timeout-ms = <50>;
        key-positions = <11 12>;
        bindings = <&kp RET>;
        layers = <AL1 AL2 AL2U>;
      };
      tab {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp TAB>;
        layers = <AL1 AL2 AL2U>;
      };
      esc {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp ESC>;
        layers = <AL1 AL2 AL2U>;
      };
      number_4 {
        timeout-ms = <200>;
        key-positions = <3 10>;
        bindings = <&kp N4>;
        layers = <NUM>;
      };
      number_5 {
        timeout-ms = <200>;
        key-positions = <4 11>;
        bindings = <&kp N5>;
        layers = <NUM>;
      };
      number_6 {
        timeout-ms = <200>;
        key-positions = <5 12>;
        bindings = <&kp N6>;
        layers = <NUM>;
      };
      dot {
        timeout-ms = <50>;
        key-positions = <10 11>;
        bindings = <&kp DOT>;
      };
      comma {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp COMMA>;
      };
      minus {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp MINUS>;
      };
      equal {
        timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp EQUAL>;
      };
      sqt {
        timeout-ms = <50>;
        key-positions = <12 13>;
        bindings = <&kp SQT>;
      };
    };

    behaviors {
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;

             quick_tap_ms = <175>;
            // retro-tap;
        };
    td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
   	alpha2macro: behavior_macro_1 {
			compatible = "zmk,behavior-macro";
			label = "MACRO1";
			#binding-cells = <0>;
			bindings = < &sl AL2 >;
		};
	caps_alpha2macro: behavior_macro_2 {
			compatible = "zmk,behavior-macro";
			label = "MACRO2";
			#binding-cells = <0>;
			bindings = < &sl AL2U >;
		};
  };
  
//                  0       1       2                   3       4           5
//          6       7       8       9                   10      11          12          13
//                          14      15                  16      17
       keymap {
        compatible = "zmk,keymap";
                
        alpha1 {
        label = "Base";
        bindings = <
                          &hml LCTL G    &hml LGUI C    &hml LALT D              &hmr LALT L    &hmr RGUI U    &hmr RCTL H
            &hll NUM A   &hll SM2 R     &hll SM1 S     &hll SYS T               &hlr SYS N     &hlr SM1 E     &hlr SM2 I   &hlr NUM O
                                        &kp SPC &ss_cw             &key_repeat &sl AL2  
        >;
        };
        alpha2 {
        label = "Al2";
        bindings = <
                    &kp V   &kp W   &kp M                                  &kp F   &kp SQT          &kp Z 
            &kp Q   &kp J   &kp K   &kp P                                  &kp B   &td COMMA DOT    &kp X   &kp Y
                                    &kp SPC &sr LSHIFT AL1                 &trans  &sl AL2U     
        >;
        };

        sym1 {
        label = "Code";
        bindings = <
                      &kp EXCL    &kp ATSN    &kp HASH                      &kp AMPS     &kp STAR		&kp QMARK
            &kp GRAVE	&kp DLLR	  &kp PRCNT   &kp CARET                     &kp UNDER    &kp BSLH	  &kp PIPE    &kp TILDE
                                  &trans      &sr LSHIFT AL1                &kp LALT &kp RGUI        
        >;
        };
        sym2 {
        label = "Punct";
        bindings = <
                        &trans      &kp LT	    &kp GT                      &kp LPAR   &kp RPAR    &kp LBRC	
            &kp SEMI    &kp PRCNT   &kp TILDE   &kp UNDER                   &kp LBKT	  &kp RBKT    &kp RBRC    &trans
                                    &td LG(V) LG(C)      &sr LSHIFT   AL1            &kp LALT &kp RGUI

        >;
        };

        num {
        label = "Num";
        bindings = <
                        &hml LCTL DOT    &hml LALT COMMA  &hml LGUI SEMI  &hmr RGUI N1   &hmr RALT N2   &hmr RCTL N3
            &kp SLASH   &kp MINUS		      &kp PLUS          &kp COLON        &kp N7			&kp N8			&kp N9		&kp N0
                                          &kp RCTL &sr LSHIFT AL1            &kp LALT  &kp RGUI        
        >;
        };

        sys {
        label = "Nav";
        bindings = <
                                &swapper       &kp LG(LS(LBKT))    &kp LG(LS(RBKT))      &kp BKSP      &td PG_UP UP    &kp DEL
            &td LG(GRAVE) TAB  &td LG(V) LG(C) &td HOME LG(LBKT)   &td END LG(RBKT)      &kp  LEFT            &td PG_DN DOWN  &td  LG(LS(N5)) RIGHT   &kp RET
                                               &kp LCTL &sr LSHIFT AL1                   &kp LALT &kp RGUI           
        >;
        };

        bt {
        label = "BT";
        bindings = <
                          &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2         &bt BT_SEL 3     &bt BT_SEL 4   &trans
            &bt BT_CLR    &trans          &trans        &bootloader          &bootloader      &trans         &trans &bt BT_CLR
                                          &trans &to AL1                      &trans &trans
        >;
        };
        fun {
        label = "Fn";
        bindings = <
                          &kp F11   &kp F10   &kp F1                         &kp F2   &kp F3   &kp F4
            &kp C_BRI_DN  &kp F12   &kp F5    &kp F6                         &kp F7   &kp F8   &kp F9  &kp C_BRI_UP
                                    &kp C_VOL_DN  &to AL1                    &td C_MUTE C_PP &kp C_VOL_UP    
                >;
        };
	      alpha2cap {
		    bindings = <
			                  &kp LS(V)	  &kp LS(W)   &kp LS(M) 	 	                &kp LS(F)    	&kp LS(SQT)		&kp LS(Z)	
			      &kp LS(Q) 	&kp LS(J) 	&kp LS(K)	  &kp LS(P)	      	            &kp LS(B)	    &kp COMMA	    &kp LS(X)	&kp LS(Y) 
			 		                          &trans 		&trans 			                    &trans	&trans
		    >;
	      };
    };
};
