/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"

/* Settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L 0 1 2 6 7 8 9       // left hand
#define KEYS_R 3 4 5 10 11 12 13   // right hand
#define THUMBS 14 15 16 17         // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Homerow layers */
#define MAKE_HRL(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <220>; \
        quick-tap-ms = <250>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRL(hll, &mo, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRL(hlr, &mo, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Sys layer navigation */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define SYS_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define SYS_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define SYS_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define SYS_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define SYS_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define SYS_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

#define PREV_TAB &kp LG(LS(LBKT))
#define NEXT_TAB &kp LG(LS(RBKT))
#define BCKWD &kp LG(LBKT)
#define FWWD &kp LG(RBKT)
#define SWAP_WIN &mt LG(GRAVE) TAB

/* Caps-word */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// CMD+Tab swapper, requires PR #1366
ZMK_TRI_STATE(swapper,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <0 15>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: minus | shift + tap: plus
SIMPLE_MORPH(plus_morph, SFT, &kp PLUS, &kp MINUS)
// tap: slash | shift + tap: star
SIMPLE_MORPH(star_morph, SFT, &kp STAR, &kp SLASH)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

// tap: copy | double-tap: cut
ZMK_TAP_DANCE(copy_cut_paste,
    tapping-term-ms = <200>;
    bindings = <&mt LG(V) LG(C)>, <&kp LG(X)>;
)

/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define BT 6
#define FUN 7
#define AL2U 8

#include "combos.dtsi" // requires layer aliases

/ { 
    behaviors {
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;

             quick_tap_ms = <175>;
            // retro-tap;
        };
   	alpha2macro: behavior_macro_1 {
			compatible = "zmk,behavior-macro";
			label = "MACRO1";
			#binding-cells = <0>;
			bindings = < &sl AL2 >;
		};
	caps_alpha2macro: behavior_macro_2 {
			compatible = "zmk,behavior-macro";
			label = "MACRO2";
			#binding-cells = <0>;
			bindings = < &sl AL2U >;
		};
  };
  
//                  0       1       2                   3       4           5
//          6       7       8       9                   10      11          12          13
//                          14      15                  16      17
       keymap {
        compatible = "zmk,keymap";
                
        alpha1 {
        label = "Base";
        bindings = <
                         &hml LCTL L    &hml LALT G    &hml LGUI D              &hmr RGUI H    &hmr RALT U    &hmr RCTL C
            &hll NUM A   &hll SM2 R     &hll SM1 S     &hll SYS T               &hlr SYS N     &hlr SM1 E     &hlr SM2 I   &hlr NUM O
                                        &kp SPC &smart_shft             &key_repeat &sl AL2  
        >;
        };
        alpha2 {
        label = "Al2";
        bindings = <
                    &kp V   &kp W   &kp P                                  &kp M   &kp J      &kp F 
            &kp Q   &kp Z   &kp X   &kp B                                  &kp K   &kp SQT    &kp Y   &kp DOT
                                    &kp SPC &sr LSHIFT AL1                 &trans  &sl AL2U     
        >;
        };

        sym1 {
        label = "Code";
        bindings = <
                      &kp AT    &kp HASH    &kp DLLR                      &kp PRCNT     &kp CARET		&kp AMPS
            &trans	&trans	  &trans   &trans                             &trans    &trans	  &trans    &kp QMARK
                                  &trans      &sr LSHIFT AL1                &kp LALT &kp RGUI        
        >;
        };
        sym2 {
        label = "Punct";
        bindings = <
                        &trans      &kp LT	    &kp GT                      &kp LPAR    &kp RPAR    &kp LBRC	
            &kp SEMI    &kp PRCNT   &kp TILDE   &kp UNDER                   &kp LBKT	  &kp RBKT    &kp RBRC    &trans
                                    &trans      &sr LSHIFT   AL1            &kp LALT &kp RGUI

        >;
        };

        num {
        label = "Num";
        bindings = <
                        &hml LCTL DOT    &hml LALT N0  &hml LGUI N1         &hmr RGUI N2   &hmr RALT N3   &hmr RCTL N4
            &star_morph   &plus_morph		    &kp N5                        &kp N6       &kp N7			&kp N8			&kp N9		&kp EQUAL
                                          &kp RCTL &sr LSHIFT AL1           &kp LALT  &kp RGUI        
        >;
        };

        sys {
        label = "Nav";
        bindings = <
                      &swapper   PREV_TAB    NEXT_TAB                        SYS_BSPC   SYS_UP     SYS_DEL
            SWAP_WIN  &copy_cut_paste BCKWD   FWWD                           SYS_LEFT SYS_DOWN  SYS_RIGHT   &kp RET
                                               &kp LCTL &sr LSHIFT AL1                   &kp LALT &kp RGUI           
        >;
        };

        bt {
        label = "BT";
        bindings = <
                          &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2         &bt BT_SEL 3     &bt BT_SEL 4   &trans
            &bt BT_CLR    &trans          &trans        &bootloader          &bootloader      &trans         &trans &bt BT_CLR
                                          &trans &to AL1                      &trans &trans
        >;
        };
        fun {
        label = "Fn";
        bindings = <
                          &kp F11   &kp F10   &kp F1                         &kp F2   &kp F3   &kp F4
            &kp C_BRI_DN  &kp F12   &kp F5    &kp F6                         &kp F7   &kp F8   &kp F9  &kp C_BRI_UP
                                    &kp C_VOL_DN  &to AL1                    &mt C_MUTE C_PP &kp C_VOL_UP    
                >;
        };
	      alpha2cap {
		    bindings = <
			                  &kp LS(V)	  &kp LS(W)   &kp LS(P) 	 	                &kp LS(M)    	&kp LS(J)		&kp LS(F)	
			      &kp LS(Q) 	&kp LS(Z) 	&kp LS(X)	  &kp LS(B)	      	            &kp LS(K)	    &kp DQT	    &kp LS(Y)	&kp COMMA 
			 		                          &trans 		&trans 			                    &trans	&trans
		    >;
	      };
    };
};
